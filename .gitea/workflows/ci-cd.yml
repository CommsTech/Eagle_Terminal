name: Eagle Terminal CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

jobs:
  linting_and_security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install bandit safety flake8 black mypy
      - name: Run Bandit
        run: bandit -r . -f custom || echo "Bandit found issues, but continuing."
      - name: Run Safety
        run: safety check || echo "Safety found vulnerabilities, but continuing."
      - name: Lint with flake8
        run: flake8 . || echo "Flake8 found issues, but continuing."
      - name: Check formatting with black
        run: black --check . || echo "Black found formatting issues, but continuing."
      - name: Check type hints with mypy
        run: mypy . --ignore-missing-imports || echo "Mypy found type issues, but continuing."
      - name: Create security issue if high severity vulnerabilities found
        if: failure()
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/SECURITY_ISSUE_TEMPLATE.md

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    env:
      CI: true
      DISPLAY: :99
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxkbcommon-x11-0 libdbus-1-3 xvfb
          sudo apt-get install -y libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0
      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      - name: Cache pip packages
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install --upgrade transformers torch jinja2
      - name: Run tests
        run: pytest tests/ ai/

  build_installers:
    needs: [linting_and_security_scan, test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build executable
        run: pyinstaller --name=EagleTerminal --windowed --onefile Eagle_Terminal.py
      - name: Create installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Add NSIS or Inno Setup commands here to create a Windows installer
          # Example (using NSIS):
          # makensis installer_script.nsi
      - name: Create installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Add commands to create a macOS .pkg or .dmg installer
          # Example:
          # pkgbuild --root dist --identifier com.commsnet.eagleterminal --version 1.0 --install-location /Applications EagleTerminal.pkg
      - name: Create installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Add commands to create a Linux .deb or .rpm package
          # Example (for .deb):
          # dpkg-deb --build dist eagleterminal_1.0_amd64.deb
      - name: Upload installer artifact
        uses: actions/upload-artifact@v2
        with:
          name: EagleTerminal-installer-${{ matrix.os }}
          path: |
            dist/EagleTerminal*
            *.exe
            *.pkg
            *.dmg
            *.deb
            *.rpm

  update_docs:
    needs: [build_installers]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs
      - name: Build docs
        run: mkdocs build
      - name: Deploy to Gitea Wiki
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GITEA_HOST }}
          username: ${{ secrets.GITEA_USERNAME }}
          key: ${{ secrets.GITEA_SSH_KEY }}
          script: |
            cd /path/to/gitea/wiki
            git pull
            cp -R /path/to/mkdocs/site/* .
            git add .
            git commit -m "Update documentation"
            git push

  push_to_github:
    needs: [build_installers, update_docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      - name: Download installer artifacts
        uses: actions/download-artifact@v2
        with:
          path: installers
      - name: Push to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add installers/*
          git commit -m "Add installer packages"
          git remote add github https://x-access-token:${GITHUB_TOKEN}@github.com/CommsTech/Eagle_Terminal.git
          git push github HEAD:main --force

  create_feature_request:
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'feature')
    runs-on: ubuntu-latest
    steps:
      - name: Create feature request card
        uses: peter-evans/create-or-update-project-card@v1
        with:
          project-name: 'Feature Requests'
          column-name: 'To Do'
          issue-number: ${{ github.event.issue.number }}